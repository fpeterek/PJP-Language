options {
    LOOKAHEAD = 1;
    STATIC = false;
    // DEBUG_PARSER = true;
    NODE_DEFAULT_VOID = true;
    MULTI = true;
}

PARSER_BEGIN(Parser)

package org.fpeterek.pjp.generated;

public class Parser {
  public static void main(String[] args) throws ParseException {
    Parser parser = new Parser(System.in);
    parser.Start().dump("");
  }
}

PARSER_END(Parser)

SKIP : /* WHITE SPACE */
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

SPECIAL_TOKEN : /* COMMENTS */
{
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

TOKEN : {
  < BOOL: "boolean" >
| < STRING: "String" >
| < FLOAT: "float" >
| < IF: "if" >
| < ELSE: "else" >
| < VAR: "var" >
| < INT: "int" >
| < WRITE: "write" >
| < READ: "read" >
| < FOR: "for" >
| < TERMINATOR: ";" >
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL>
      | <HEX_LITERAL>
      | <OCTAL_LITERAL>
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOAT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F"]
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < BOOL_LITERAL: ("true"|"false") >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

TOKEN : /* OPERATORS */
{
  < ASSIGN: "=" >
| < GT: ">" >
| < LT: "<" >
| < BANG: "!" >
| < HOOK: "?" >
| < COLON: ":" >
| < EQ: "==" >
| < LTE: "<=" >
| < GTE: ">=" >
| < NEQ: "!=" >
| < OR: "||" >
| < AND: "&&" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < REM: "%" >
| < PERIOD: "." >

}

TOKEN : {
  < LEFT_BRACE: "{" >
| < RIGHT_BRACE: "}" >
}

TOKEN : {
  < IDENTIFIER: ["a"-"z", "A"-"Z", "_"] (["a"-"z", "A"-"Z", "0"-"9", "_"])* >
}

ASTStart Start() #Start :
{}
{
    (Statement() )* <EOF>
    { return jjtThis; }
}

void Statement() :
{}
{
  <TERMINATOR>
| ( <VAR> <IDENTIFIER> ("," <IDENTIFIER>)* ":" (<INT>|<BOOL>|<FLOAT>|<STRING>) <TERMINATOR> ) #Var
| ( <READ> <IDENTIFIER> ("," <IDENTIFIER>)* <TERMINATOR> ) #Read
| ( <WRITE> Expression() ("," Expression())* <TERMINATOR> ) #Write
| Expression() <TERMINATOR>
| ControlFlow()
}

void ControlFlow() :
{}
{
  If()
| For()
}

void For() #For :
{}
{
  <FOR> "(" [Expression()] <TERMINATOR> Expression() <TERMINATOR> [Expression()] ")" StatementBlock()
}

void If() #If :
{}
{
 <IF> BracedExpression() StatementBlock() [ LOOKAHEAD(2) <ELSE> StatementBlock() ]
}

void StatementBlock() :
{}
{
  Statement()
| ( <LEFT_BRACE> (Statement())* <RIGHT_BRACE> ) #Block
}

void Expression() :
{}
{
  TernaryOperator()
}

void BracedExpression() :
{}
{
  "(" TernaryOperator() ")"
}

void TernaryOperator() :
{}
{
  ( BinaryOperator() [ <HOOK> BinaryOperator() <COLON> BinaryOperator() ] ) #Ternary(>1)
}

void BinaryOperator() :
{}
{
  LOOKAHEAD(<IDENTIFIER> <ASSIGN>) Assignment() | OrExpression()
}

void Assignment() #Assignment :
{}
{
  <IDENTIFIER> <ASSIGN> OrExpression()
}

void OrExpression() :
{}
{
  ( AndExpression() [<OR> OrExpression()] ) #Or(>1)
}

void AndExpression() :
{}
{
  ( Comparison() [<AND> AndExpression()] ) #And(>1)
}

void Comparison() :
{
  Token t;
}
{
  (
    Addition()
    [
      (
         t=<GT>   {jjtThis.value = t.image;}
        |t=<GTE>  {jjtThis.value = t.image;}
        |t=<LT>   {jjtThis.value = t.image;}
        |t=<LTE>  {jjtThis.value = t.image;}
        |t=<EQ>   {jjtThis.value = t.image;}
        |t=<NEQ>  {jjtThis.value = t.image;}
      )
      Addition()
    ]
  ) #Cmp(>1)
}

void Addition() :
{
  Token t;
}
{
  (
    Multiplication()
    [
      (
         t=<PLUS>   {jjtThis.value = t.image;}
        |t=<MINUS>  {jjtThis.value = t.image;}
        |t=<PERIOD> {jjtThis.value = t.image;}
      ) Addition()
    ]
  ) #Add(>1)
}

void Multiplication() :
{
  Token t;
}
{
  (
    UnaryOperator()
    [
      (
         t=<STAR>  {jjtThis.value = t.image;}
        |t=<REM>   {jjtThis.value = t.image;}
        |t=<SLASH> {jjtThis.value = t.image;}
      ) Multiplication()
    ]
  ) #Mult(>1)
}

void UnaryOperator() :
{
  Token t;
}
{
  (
    (
       t=<MINUS> {jjtThis.value = t.image;}
      |t=<BANG>  {jjtThis.value = t.image;}
    ) UnaryOperator()
  ) #UnaryOp
  | Value()
}

void Value() :
{
  Token t;
}
{
  t=<IDENTIFIER> {jjtThis.value = t.image;} #Identifier
| Literal()
| BracedExpression()
}

void Literal()  :
{
  Token t;
}
{
  t=<STRING_LITERAL>  {jjtThis.value = t.image;} #StringLiteral
| t=<FLOAT_LITERAL>   {jjtThis.value = t.image;} #FloatLiteral
| t=<INTEGER_LITERAL> {jjtThis.value = t.image;} #IntLiteral
| t=<BOOL_LITERAL>    {jjtThis.value = t.image;} #BoolLiteral
}

/* Generated By:JJTree&JavaCC: Do not edit this line. ParserConstants.java */
package org.fpeterek.pjp.generated;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 6;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 7;
  /** RegularExpression Id. */
  int BOOL = 8;
  /** RegularExpression Id. */
  int STRING = 9;
  /** RegularExpression Id. */
  int FLOAT = 10;
  /** RegularExpression Id. */
  int IF = 11;
  /** RegularExpression Id. */
  int ELSE = 12;
  /** RegularExpression Id. */
  int VAR = 13;
  /** RegularExpression Id. */
  int INT = 14;
  /** RegularExpression Id. */
  int WRITE = 15;
  /** RegularExpression Id. */
  int READ = 16;
  /** RegularExpression Id. */
  int FOR = 17;
  /** RegularExpression Id. */
  int TERMINATOR = 18;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 19;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 20;
  /** RegularExpression Id. */
  int HEX_LITERAL = 21;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 22;
  /** RegularExpression Id. */
  int FLOAT_LITERAL = 23;
  /** RegularExpression Id. */
  int EXPONENT = 24;
  /** RegularExpression Id. */
  int BOOL_LITERAL = 25;
  /** RegularExpression Id. */
  int STRING_LITERAL = 26;
  /** RegularExpression Id. */
  int ASSIGN = 27;
  /** RegularExpression Id. */
  int GT = 28;
  /** RegularExpression Id. */
  int LT = 29;
  /** RegularExpression Id. */
  int BANG = 30;
  /** RegularExpression Id. */
  int HOOK = 31;
  /** RegularExpression Id. */
  int COLON = 32;
  /** RegularExpression Id. */
  int EQ = 33;
  /** RegularExpression Id. */
  int LTE = 34;
  /** RegularExpression Id. */
  int GTE = 35;
  /** RegularExpression Id. */
  int NEQ = 36;
  /** RegularExpression Id. */
  int OR = 37;
  /** RegularExpression Id. */
  int AND = 38;
  /** RegularExpression Id. */
  int PLUS = 39;
  /** RegularExpression Id. */
  int MINUS = 40;
  /** RegularExpression Id. */
  int STAR = 41;
  /** RegularExpression Id. */
  int SLASH = 42;
  /** RegularExpression Id. */
  int REM = 43;
  /** RegularExpression Id. */
  int PERIOD = 44;
  /** RegularExpression Id. */
  int LEFT_BRACE = 45;
  /** RegularExpression Id. */
  int RIGHT_BRACE = 46;
  /** RegularExpression Id. */
  int IDENTIFIER = 47;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "<SINGLE_LINE_COMMENT>",
    "<MULTI_LINE_COMMENT>",
    "\"boolean\"",
    "\"String\"",
    "\"float\"",
    "\"if\"",
    "\"else\"",
    "\"var\"",
    "\"int\"",
    "\"write\"",
    "\"read\"",
    "\"for\"",
    "\";\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOAT_LITERAL>",
    "<EXPONENT>",
    "<BOOL_LITERAL>",
    "<STRING_LITERAL>",
    "\"=\"",
    "\">\"",
    "\"<\"",
    "\"!\"",
    "\"?\"",
    "\":\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"||\"",
    "\"&&\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\".\"",
    "\"{\"",
    "\"}\"",
    "<IDENTIFIER>",
    "\",\"",
    "\"(\"",
    "\")\"",
  };

}

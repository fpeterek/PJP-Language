/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. parser.jj */
/*@egen*/options {
    LOOKAHEAD = 1;
    STATIC = false;
                           
                         
                             
                 
}

PARSER_BEGIN(Parser)

package org.fpeterek.pjp.generated;

public class Parser/*@bgen(jjtree)*/implements ParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTParserState jjtree = new JJTParserState();

/*@egen*/
  public static void main(String[] args) throws ParseException {
    Parser parser = new Parser(System.in);
    parser.Start().dump("");
  }

  void jjtreeOpenNodeScope(Node n) {
    ((SimpleNode)n).line = getToken(0).beginLine;
    ((SimpleNode)n).column = getToken(0).beginColumn;
  }
  void jjtreeCloseNodeScope(Node n) { }

}

PARSER_END(Parser)

SKIP : /* WHITE SPACE */
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

SPECIAL_TOKEN : /* COMMENTS */
{
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

TOKEN : {
  < BOOL: "boolean" >
| < STRING: "String" >
| < FLOAT: "float" >
| < IF: "if" >
| < ELSE: "else" >
| < VAR: "var" >
| < INT: "int" >
| < WRITE: "write" >
| < READ: "read" >
| < FOR: "for" >
| < TERMINATOR: ";" >
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL>
      | <HEX_LITERAL>
      | <OCTAL_LITERAL>
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOAT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F"]
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < BOOL_LITERAL: ("true"|"false") >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

TOKEN : /* OPERATORS */
{
  < ASSIGN: "=" >
| < GT: ">" >
| < LT: "<" >
| < BANG: "!" >
| < HOOK: "?" >
| < COLON: ":" >
| < EQ: "==" >
| < LTE: "<=" >
| < GTE: ">=" >
| < NEQ: "!=" >
| < OR: "||" >
| < AND: "&&" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < REM: "%" >
| < PERIOD: "." >

}

TOKEN : {
  < LEFT_BRACE: "{" >
| < RIGHT_BRACE: "}" >
}

TOKEN : {
  < IDENTIFIER: ["a"-"z", "A"-"Z", "_"] (["a"-"z", "A"-"Z", "0"-"9", "_"])* >
}

ASTStart Start()        :
{/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
    try {
/*@egen*/
    (Statement() )* <EOF>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        if (jjtree.nodeCreated()) {
         jjtreeCloseNodeScope(jjtn000);
        }
      }
    }
/*@egen*/
}

void Statement() :
{}
{
  <TERMINATOR>
| Var()
|/*@bgen(jjtree) Read */
  {
    ASTRead jjtn001 = new ASTRead(JJTREAD);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
  }
  try {
/*@egen*/ ( <READ> Identifier() ("," Identifier())* <TERMINATOR> )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn001);
      }
    }
  }
/*@egen*/      
|/*@bgen(jjtree) Write */
  {
    ASTWrite jjtn002 = new ASTWrite(JJTWRITE);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
    jjtreeOpenNodeScope(jjtn002);
  }
  try {
/*@egen*/ ( <WRITE> Expression() ("," Expression())* <TERMINATOR> )/*@bgen(jjtree)*/
  } catch (Throwable jjte002) {
    if (jjtc002) {
      jjtree.clearNodeScope(jjtn002);
      jjtc002 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte002 instanceof RuntimeException) {
      throw (RuntimeException)jjte002;
    }
    if (jjte002 instanceof ParseException) {
      throw (ParseException)jjte002;
    }
    throw (Error)jjte002;
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn002);
      }
    }
  }
/*@egen*/       
| Expression() <TERMINATOR>
| ControlFlow()
}

void Var()      :
{/*@bgen(jjtree) Var */
  ASTVar jjtn000 = new ASTVar(JJTVAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Var */
   try {
/*@egen*/
   <VAR> Identifier() ("," Identifier())* ":"
   (
      t=<INT>    {jjtn000.value = t.image;}
     |t=<BOOL>   {jjtn000.value = t.image;}
     |t=<FLOAT>  {jjtn000.value = t.image;}
     |t=<STRING> {jjtn000.value = t.image;}
   )
   <TERMINATOR>/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       if (jjtree.nodeCreated()) {
        jjtreeCloseNodeScope(jjtn000);
       }
     }
   }
/*@egen*/
}

void ControlFlow() :
{}
{
  If()
| For()
}

void For()      :
{/*@bgen(jjtree) For */
  ASTFor jjtn000 = new ASTFor(JJTFOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) For */
  try {
/*@egen*/
  <FOR> "(" Expression() <TERMINATOR> Expression() <TERMINATOR> Expression() ")" StatementBlock()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }
  }
/*@egen*/
}

void If()     :
{/*@bgen(jjtree) If */
  ASTIf jjtn000 = new ASTIf(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) If */
 try {
/*@egen*/
 <IF> BracedExpression() StatementBlock() [ LOOKAHEAD(2) <ELSE> StatementBlock() ]/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
     if (jjtree.nodeCreated()) {
      jjtreeCloseNodeScope(jjtn000);
     }
   }
 }
/*@egen*/
}

void StatementBlock() :
{}
{
  Statement()
|/*@bgen(jjtree) Block */
  {
    ASTBlock jjtn001 = new ASTBlock(JJTBLOCK);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
  }
  try {
/*@egen*/ ( <LEFT_BRACE> (Statement())* <RIGHT_BRACE> )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn001);
      }
    }
  }
/*@egen*/       
}

void Expression() :
{}
{
  TernaryOperator()
}

void BracedExpression() :
{}
{
  "(" TernaryOperator() ")"
}

void TernaryOperator() :
{}
{/*@bgen(jjtree) #Ternary(> 1) */
  {
    ASTTernary jjtn001 = new ASTTernary(JJTTERNARY);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
  }
  try {
/*@egen*/
  ( BinaryOperator() [ <HOOK> BinaryOperator() <COLON> BinaryOperator() ] )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn001);
      }
    }
  }
/*@egen*/             
}

void BinaryOperator() :
{}
{
  LOOKAHEAD(<IDENTIFIER> <ASSIGN>) Assignment() | OrExpression()
}

void Assignment()             :
{/*@bgen(jjtree) Assignment */
ASTAssignment jjtn000 = new ASTAssignment(JJTASSIGNMENT);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
jjtreeOpenNodeScope(jjtn000);
/*@egen*/
Token t;
}
{/*@bgen(jjtree) Assignment */
  try {
/*@egen*/
  Identifier()
  t=<ASSIGN> {jjtn000.value = t.image;}
  OrExpression()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
    }
  }
/*@egen*/
}

void OrExpression() :
{
  Token t;
}
{/*@bgen(jjtree) #Or(> 1) */
  {
    ASTOr jjtn001 = new ASTOr(JJTOR);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (
    AndExpression()
    [
      t=<OR> {jjtn001.value = t.image;}
      OrExpression()
    ]
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn001);
      }
    }
  }
/*@egen*/        
}

void AndExpression() :
{
  Token t;
}
{/*@bgen(jjtree) #And(> 1) */
  {
    ASTAnd jjtn001 = new ASTAnd(JJTAND);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (
    Comparison()
    [
      t=<AND> {jjtn001.value = t.image;}
      AndExpression()
    ]
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn001);
      }
    }
  }
/*@egen*/         
}

void Comparison() :
{
  Token t;
}
{/*@bgen(jjtree) #Cmp(> 1) */
  {
    ASTCmp jjtn001 = new ASTCmp(JJTCMP);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (
    Addition()
    [
      (
         t=<GT>   {jjtn001.value = t.image;}
        |t=<GTE>  {jjtn001.value = t.image;}
        |t=<LT>   {jjtn001.value = t.image;}
        |t=<LTE>  {jjtn001.value = t.image;}
        |t=<EQ>   {jjtn001.value = t.image;}
        |t=<NEQ>  {jjtn001.value = t.image;}
      )
      Addition()
    ]
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn001);
      }
    }
  }
/*@egen*/         
}

void Addition() :
{
  Token t;
}
{/*@bgen(jjtree) #Add(> 1) */
  {
    ASTAdd jjtn001 = new ASTAdd(JJTADD);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (
    Multiplication()
    [
      (
         t=<PLUS>   {jjtn001.value = t.image;}
        |t=<MINUS>  {jjtn001.value = t.image;}
        |t=<PERIOD> {jjtn001.value = t.image;}
      ) Addition()
    ]
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn001);
      }
    }
  }
/*@egen*/         
}

void Multiplication() :
{
  Token t;
}
{/*@bgen(jjtree) #Mult(> 1) */
  {
    ASTMult jjtn001 = new ASTMult(JJTMULT);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (
    UnaryOperator()
    [
      (
         t=<STAR>  {jjtn001.value = t.image;}
        |t=<REM>   {jjtn001.value = t.image;}
        |t=<SLASH> {jjtn001.value = t.image;}
      ) Multiplication()
    ]
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn001);
      }
    }
  }
/*@egen*/          
}

void UnaryOperator() :
{
  Token t;
}
{/*@bgen(jjtree) UnaryOp */
  {
    ASTUnaryOp jjtn001 = new ASTUnaryOp(JJTUNARYOP);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (
    (
       t=<MINUS> {jjtn001.value = t.image;}
      |t=<BANG>  {jjtn001.value = t.image;}
    ) UnaryOperator()
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn001);
      }
    }
  }
/*@egen*/         
  | Value()
}

void Value() :
{
  Token t;
}
{
  Identifier()
| Literal()
| BracedExpression()
}

void Identifier() :
{
  Token t;
}
{
    t=<IDENTIFIER>/*@bgen(jjtree) Identifier */
                   {
                     ASTIdentifier jjtn001 = new ASTIdentifier(JJTIDENTIFIER);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
                     jjtreeOpenNodeScope(jjtn001);
                   }
                   try {
/*@egen*//*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn001, true);
                     jjtc001 = false;
                     if (jjtree.nodeCreated()) {
                      jjtreeCloseNodeScope(jjtn001);
                     }
                   }
/*@egen*/ {jjtn001.value = t.image;}/*@bgen(jjtree)*/
                   } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001, true);
                       if (jjtree.nodeCreated()) {
                        jjtreeCloseNodeScope(jjtn001);
                       }
                     }
                   }
/*@egen*/            
}

void Literal()  :
{
  Token t;
}
{
  t=<STRING_LITERAL>/*@bgen(jjtree) StringLiteral */
                      {
                        ASTStringLiteral jjtn001 = new ASTStringLiteral(JJTSTRINGLITERAL);
                        boolean jjtc001 = true;
                        jjtree.openNodeScope(jjtn001);
                        jjtreeOpenNodeScope(jjtn001);
                      }
                      try {
/*@egen*//*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn001, true);
                        jjtc001 = false;
                        if (jjtree.nodeCreated()) {
                         jjtreeCloseNodeScope(jjtn001);
                        }
                      }
/*@egen*/  {jjtn001.value = t.image;}/*@bgen(jjtree)*/
                      } finally {
                        if (jjtc001) {
                          jjtree.closeNodeScope(jjtn001, true);
                          if (jjtree.nodeCreated()) {
                           jjtreeCloseNodeScope(jjtn001);
                          }
                        }
                      }
/*@egen*/               
| t=<FLOAT_LITERAL>/*@bgen(jjtree) FloatLiteral */
                      {
                        ASTFloatLiteral jjtn002 = new ASTFloatLiteral(JJTFLOATLITERAL);
                        boolean jjtc002 = true;
                        jjtree.openNodeScope(jjtn002);
                        jjtreeOpenNodeScope(jjtn002);
                      }
                      try {
/*@egen*//*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn002, true);
                        jjtc002 = false;
                        if (jjtree.nodeCreated()) {
                         jjtreeCloseNodeScope(jjtn002);
                        }
                      }
/*@egen*/   {jjtn002.value = t.image;}/*@bgen(jjtree)*/
                      } finally {
                        if (jjtc002) {
                          jjtree.closeNodeScope(jjtn002, true);
                          if (jjtree.nodeCreated()) {
                           jjtreeCloseNodeScope(jjtn002);
                          }
                        }
                      }
/*@egen*/              
| t=<INTEGER_LITERAL>/*@bgen(jjtree) IntLiteral */
                      {
                        ASTIntLiteral jjtn003 = new ASTIntLiteral(JJTINTLITERAL);
                        boolean jjtc003 = true;
                        jjtree.openNodeScope(jjtn003);
                        jjtreeOpenNodeScope(jjtn003);
                      }
                      try {
/*@egen*//*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn003, true);
                        jjtc003 = false;
                        if (jjtree.nodeCreated()) {
                         jjtreeCloseNodeScope(jjtn003);
                        }
                      }
/*@egen*/ {jjtn003.value = t.image;}/*@bgen(jjtree)*/
                      } finally {
                        if (jjtc003) {
                          jjtree.closeNodeScope(jjtn003, true);
                          if (jjtree.nodeCreated()) {
                           jjtreeCloseNodeScope(jjtn003);
                          }
                        }
                      }
/*@egen*/            
| t=<BOOL_LITERAL>/*@bgen(jjtree) BoolLiteral */
                      {
                        ASTBoolLiteral jjtn004 = new ASTBoolLiteral(JJTBOOLLITERAL);
                        boolean jjtc004 = true;
                        jjtree.openNodeScope(jjtn004);
                        jjtreeOpenNodeScope(jjtn004);
                      }
                      try {
/*@egen*//*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn004, true);
                        jjtc004 = false;
                        if (jjtree.nodeCreated()) {
                         jjtreeCloseNodeScope(jjtn004);
                        }
                      }
/*@egen*/    {jjtn004.value = t.image;}/*@bgen(jjtree)*/
                      } finally {
                        if (jjtc004) {
                          jjtree.closeNodeScope(jjtn004, true);
                          if (jjtree.nodeCreated()) {
                           jjtreeCloseNodeScope(jjtn004);
                          }
                        }
                      }
/*@egen*/             
}